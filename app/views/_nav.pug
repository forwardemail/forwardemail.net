if ctx.pathWithoutLocale !== '/email-api'
  #modal-search.modal.fade(
    tabindex="-1",
    role="dialog",
    aria-labelledby="modal-search-title",
    aria-hidden="true"
  )
    .modal-dialog(role="document")
      .modal-content
        .modal-header.text-center.d-block
          #modal-help-title.h4.d-inline-block.ml-4= t("Search for anything:")
          button.close(type="button", data-dismiss="modal", aria-label="Close")
            span(aria-hidden="true") &times;
        .modal-body
          include _search-form
if !isHelp && user && !isBot(ctx.get('User-Agent'))
  #modal-help.modal.fade(
    tabindex="-1",
    role="dialog",
    aria-labelledby="modal-help-title",
    aria-hidden="true"
  )
    .modal-dialog.modal-lg(role="document")
      .modal-content
        .modal-header.text-center.d-block
          #modal-help-title.h4.d-inline-block.ml-4= t("Ask a question")
          button.close(type="button", data-dismiss="modal", aria-label="Close")
            span(aria-hidden="true") &times;
        .modal-body
          form.ajax-form.confirm-prompt(action=l("/help"), method="POST")
            if ctx.pathWithoutLocale !== '/faq'
              p.text-center.font-weight-bold
                != t('Have you read our <a href="%s" target="_blank" rel="noopener noreferrer">FAQ</a> yet?', domain && domain.name ? l(`/faq?domain=${domain.name}`) : l("/faq"))
            .form-group.floating-label
              textarea#input-message.form-control(
                rows="8",
                required,
                maxlength=config.supportRequestMaxLength,
                name="message",
                placeholder=t("Write your message")
              )
              label(for="input-message")= t("Message")
            if config.turnstileEnabled
              noscript
                .alert.alert-danger.font-weight-bold.text-center.border-top-0.border-left-0.border-right-0.rounded-0.small!= t("Please enable JavaScript to use our website.")
              .cf-explicit-turnstile
            button.btn.btn-block.btn-success.btn-lg(
              type="submit",
              data-toggle="tooltip",
              data-container="body",
              data-placement="bottom",
              title=t("We'll be in contact with you!")
            )= t("Send message")

if !user && !registerOrLogin
  include _register-or-login
  if !isBot(ctx.get('User-Agent')) && ctx.pathWithoutLocale !== '/register' && ctx.pathWithoutLocale !== config.loginRoute
    each verb in [ 'sign up', 'sign in' ]
      .modal.fade(
        tabindex="-1",
        role="dialog",
        id=`modal-${dashify(verb)}`,
        aria-labelledby=`modal-${dashify(verb)}-title`,
        aria-hidden="true"
      )
        .modal-dialog(role="document")
          .modal-content
            .modal-header.text-center.d-block
              .h4.d-inline-block.ml-4(id=`modal-${dashify(verb)}-title`)
                if verb === 'sign up'
                  != t("Sign up now &ndash; it's free!")
                else
                  = t("Welcome back!")
              button.close(
                type="button",
                data-dismiss="modal",
                aria-label="Close"
              )
                span(aria-hidden="true") &times;
            .modal-body
              +registerOrLogin(verb, true)
- const navbarClasses = [];
if user
  - navbarClasses.push("navbar-dark", "bg-dark", "border-bottom");
else if ['/', '/private-business-email', ...Object.keys(useCases)].includes(ctx.pathWithoutLocale) && !isBot(ctx.get("User-Agent")) && !boolean(ctx.query.pricing)
  - navbarClasses.push("text-white");
  //- used by core.js JavaScript file
  //- (purely for `hasClass('text-white-required')` check
  //- (hacky but we can clean this up later)
  - navbarClasses.push("text-white-required");
else
  - navbarClasses.push("bg-white", "navbar-themed", "bg-themed", "border-bottom");
if !isBot(ctx.get("User-Agent"))
  - navbarClasses.unshift("navbar-expand-lg");
  if ctx.pathWithoutLocale !== '/email-api'
    - navbarClasses.unshift("fixed-top");

if ctx.pathWithoutLocale === "/email-api"
  - isContainerFluid = true;

//- these locales require decreased font-size in navbar <a class="btn"> tags
if ['da', 'de', 'es', 'fi', 'fr', 'he', 'pt', 'sv', 'tr', 'vi'].includes(ctx.locale)
  - navbarClasses.unshift("navbar-small");

nav.navbar(class=navbarClasses.join(" "))
  div(
    class=hasSidebar || ctx.pathWithoutLocale.startsWith("/admin/") || ctx.pathWithoutLocale.startsWith("/my-account/analytics") || ctx.pathWithoutLocale.startsWith("/my-account/logs") || ctx.pathWithoutLocale.startsWith("/my-account/emails") || (typeof isContainerFluid === "boolean" && isContainerFluid === true) ? "container-fluid" : "container"
  )
    a.navbar-brand.d-inline-block.m-0.font-weight-bold(
      href=user ? l(config.passportCallbackOptions.successReturnToOrRedirect) : l(),
      class=isBot(ctx.get("User-Agent")) ? "" : "text-themed"
    )
      if (domain && domain.name && config.ubuntuTeamMapping && Object.keys(config.ubuntuTeamMapping).includes(domain.name)) || ['/ubuntu','/kubuntu','/lubuntu','/edubuntu','/ubuntu-studio'].includes(ctx.pathWithoutLocale)
        if user
          img(
            src=manifest("img/ubuntu-one-mono-logo.svg"),
            width=98,
            height=40,
            alt=t("Ubuntu One")
          )
        else
          picture
            source(
              srcset=manifest("img/ubuntu-one-mono-logo.svg"),
              media="(prefers-color-scheme: dark)"
            )
            img(
              src=manifest("img/ubuntu-one-mono-logo-dark.svg"),
              width=98,
              height=40,
              alt=t("Ubuntu One")
            )
      else
        span.sr-only.sr-only-focusable Forward Email
        include ../../assets/img/logo-square-30-30.svg
        span.m-0.align-middle.no-js.ml-2(
          class=isBot(ctx.get("User-Agent")) ? "d-none d-md-inline-block" : "d-inline-block"
        )= "Forward Email"

    - const isUbuntu = (domain && domain.name && config.ubuntuTeamMapping && Object.keys(config.ubuntuTeamMapping).includes(domain.name)) || ["/ubuntu", "/kubuntu", "/lubuntu", "/edubuntu", "/ubuntu-studio"].includes(ctx.pathWithoutLocale);
    - const isDomainSpecificUpgrade = domain && domain.name ? ctx.pathWithoutLocale === `/my-account/domains/${punycode.toASCII(domain.name)}/billing` : false;
    if user && user.plan === 'free' && !domain && Array.isArray(domains)
      - const filteredDomains = domains.filter((domain) => domain.plan === "free" && !domain.is_global && domain.group === "admin");
      if filteredDomains.length > 0
        - domain = filteredDomains[0];
    if user && user.plan === 'free' && ctx.pathWithoutLocale !== config.verifyRoute && ctx.pathWithoutLocale !== '/my-account/domains/new' && !ctx.pathWithoutLocale.startsWith('/my-account/billing') && !isDomainSpecificUpgrade
      ul.list-inline.ml-auto.mr-3.d-inline-block.d-lg-none.mb-0
        //- Site Search
        if ctx.pathWithoutLocale !== '/email-api'
          li.list-inline-item
            a.btn(
              href=l("/search"),
              data-toggle="modal",
              data-target="#modal-search",
              role="button",
              class=`btn-link ${user ? 'text-white' : 'text-themed'}`
            )
              i.fa.fa-search
              span.sr-only
                = " "
                = t("Search")
        if !isUbuntu
          li.list-inline-item
            a.btn.btn-sm.btn-danger(
              href=domain && domain.name ? l(`/my-account/domains/${punycode.toASCII(domain.name)}/billing?plan=enhanced_protection`) : l("/my-account/billing/upgrade?plan=enhanced_protection")
            )
              = t("Upgrade")
    else if user
      ul.list-inline.ml-auto.d-inline-block.d-lg-none.mb-0
        //- Site Search
        if ctx.pathWithoutLocale !== '/email-api'
          li.list-inline-item
            a.btn(
              href=l("/search"),
              data-toggle="modal",
              data-target="#modal-search",
              role="button",
              class=`btn-link ${user ? 'text-white' : 'text-themed'}`
            )
              i.fa.fa-search
              span.sr-only
                = " "
                = t("Search")
    else if !user && !isBot(ctx.get('User-Agent'))
      ul.list-inline.ml-auto.d-inline-block.d-lg-none.mb-0
        //- Site Search
        if ctx.pathWithoutLocale !== '/email-api'
          li.list-inline-item
            a.btn(
              href=l("/search"),
              data-toggle="modal",
              data-target="#modal-search",
              role="button",
              class=`btn-link ${user ? 'text-white' : 'text-themed'}`
            )
              i.fa.fa-search
              span.sr-only
                = " "
                = t("Search")

        //- do same for noscript
        if !isBot(ctx.get('User-Agent'))
          noscript
            li.list-inline-item
              a.btn.btn-link.text-themed.btn-sm(
                href=l("/private-business-email?pricing=true"),
                class=ctx.pathWithoutLocale.startsWith("/private-business-email") ? "text-decoration-underline" : ""
              )
                != t("Features &amp; Pricing")
            //-.
              li.list-inline-item
                a.btn.btn-link.text-themed.btn-sm(
                  href=l("/email-analytics"),
                  class=ctx.pathWithoutLocale.startsWith("/email-analytics") ? "text-decoration-underline" : ""
                )
                  != t("Email Analytics")
            li.list-inline-item
              a.btn.btn-link.text-themed.btn-sm(
                href=l("/faq"),
                class=ctx.pathWithoutLocale.startsWith("/faq") ? "text-decoration-underline" : ""
              )
                = t("FAQ")
        if !isBot(ctx.get('User-Agent'))
          if ctx.pathWithoutLocale !== config.loginRoute
            li.list-inline-item.d-none.d-md-inline-block.d-lg-none
              a.btn.btn-link.btn-sm.text-themed(
                role=isRegisterOrLogin ? "link" : "button",
                href=l(config.loginRoute),
                data-toggle=isRegisterOrLogin ? false : "modal-anchor",
                data-target=isRegisterOrLogin ? false : "#modal-sign-in"
              )= t("Log in")
          if ctx.pathWithoutLocale !== '/register'
            li.list-inline-item.d-none.d-md-inline-block
              a.btn.btn-sm.btn-success.text-uppercase.font-weight-bold(
                href=l("/register"),
                data-toggle=isRegisterOrLogin ? false : "modal-anchor",
                data-target=isRegisterOrLogin ? false : "#modal-sign-up"
              )
                if ctx.locale === 'de'
                  = t("Register")
                else
                  = t("Signup")
      .no-js.is-bot.d-inline-block.mr-3
    if !isBot(ctx.get('User-Agent'))
      button.navbar-toggler.d-lg-none.no-js(
        type="button",
        data-toggle="collapse",
        data-target="#navbar-header",
        aria-controls="navbar-header",
        aria-expanded="false",
        aria-label=t("Toggle navigation"),
        class=user ? "text-white" : "text-themed"
      )
        i.fas.fa-bars
    //- once we have responsive border utilities added to bootstrap
    //- then we can apply them to the anchor tags inside the navbar
    //- so that on mobile devices there is no border around the links
    //- <https://github.com/twbs/bootstrap/issues/25030>
    if isBot(ctx.get("User-Agent"))
      //- Encrypted Email
      //- Private Business Email
      //- FAQ
      ul.list-inline.ml-auto.mb-0
        li.list-inline-item: a(
          class=ctx.pathWithoutLocale === "/blog/docs/best-quantum-safe-encrypted-email-service" ? "text-decoration-underline" : "",
          href=l("/blog/docs/best-quantum-safe-encrypted-email-service"),
          title=striptags(t(config.meta["/blog/docs/best-quantum-safe-encrypted-email-service"][0]))
        )= t("Encrypted Email")
        li.list-inline-item: a(
          class=ctx.pathWithoutLocale === "/private-business-email" ? "text-decoration-underline" : "",
          href=l("/private-business-email"),
          title=striptags(t(config.meta["/private-business-email"][0]))
        )= t("Privacy")
        li.list-inline-item: a(
          class=ctx.pathWithoutLocale === "/faq" ? "text-decoration-underline" : "",
          href=l("/faq"),
          title=striptags(t(config.meta["/faq"][0]))
        )= t("FAQ")
    else
      #navbar-header.collapse.navbar-collapse
        ul.navbar-nav.ml-auto.mt-2.mt-md-0
          //- Site Search
          if ctx.pathWithoutLocale !== '/email-api'
            li.nav-item.d-none.d-lg-inline-block
              a.btn.d-block.text-left(
                href=l("/search"),
                data-toggle="modal",
                data-target="#modal-search",
                role="button",
                class=`btn-link ${user ? 'text-white' : 'text-themed'}`
              )
                i.fa.fa-search
                span.sr-only
                  = " "
                  = t("Search")

          if !isUbuntu && user && user.plan === 'free' && ctx.pathWithoutLocale !== config.verifyRoute && ctx.pathWithoutLocale !== '/my-account/domains/new' && !ctx.pathWithoutLocale.startsWith('/my-account/billing') && !isDomainSpecificUpgrade && ctx.pathWithoutLocale !== '/denylist'
            li.nav-item.mr-md-3.d-none.d-md-inline-block
              a.btn.btn-danger.d-block.text-left(
                href=domain && domain.name ? l(`/my-account/domains/${punycode.toASCII(domain.name)}/billing?plan=enhanced_protection`) : l("/my-account/billing/upgrade?plan=enhanced_protection")
              )
                = t("Upgrade")

          //-.
            - let hasFAQLink = false;
            if !isBot(ctx.get('User-Agent')) && (!user || user.plan === 'free')
              - hasFAQLink = true;
              li.nav-item
                a.btn.btn-link.d-block.text-left(
                  href=l("/faq"),
                  class=ctx.pathWithoutLocale === "/faq" ? `btn-link ${user ? "text-white" : "text-themed"} text-decoration-underline` : `btn-link ${user ? "text-white" : "text-themed"}`
                )= t("FAQ")

          //- Apps
          - const isApps = ["/blog/open-source/apple-email-clients", "/blog/open-source/windows-email-clients", "/blog/open-source/android-email-clients", "/blog/open-source/linux-email-clients", "/blog/open-source/terminal-email-clients", "/blog/open-source/web-email-clients"].includes(ctx.pathWithoutLocale);
          if !isBot(ctx.get('User-Agent'))
            li.nav-item.dropdown.no-js
              form.mb-0
                a#navbar-dropdown-apps.btn.dropdown-toggle.d-block.text-left.no-js(
                  href=l("/blog/open-source"),
                  data-toggle="dropdown",
                  data-boundary="window",
                  aria-haspopup="true",
                  aria-expanded="false",
                  class=isApps ? `btn-link ${user ? "text-white" : "text-themed"} text-decoration-underline` : `btn-link ${user ? "text-white" : "text-themed"}`
                )
                  = t("Apps")
                .dropdown-menu(aria-labelledby="navbar-dropdown-apps")
                  //- Apple
                  a.dropdown-item(
                    href=l("/blog/open-source/apple-email-clients"),
                    class=ctx.pathWithoutLocale === "/blog/open-source/apple-email-clients" ? "active" : ""
                  )
                    //- apple doesn't let you use logo
                    = "Apple"
                    != "&reg;"
                  //- Windows
                  a.dropdown-item(
                    href=l("/blog/open-source/windows-email-clients"),
                    class=ctx.pathWithoutLocale === "/blog/open-source/windows-email-clients" ? "active" : ""
                  )
                    //- msft doesn't let you use logo
                    = "Windows"
                    != "&reg;"
                  //- Android
                  a.dropdown-item(
                    href=l("/blog/open-source/android-email-clients"),
                    class=ctx.pathWithoutLocale === "/blog/open-source/android-email-clients" ? "active" : ""
                  )
                    i.fa-fw.fab.fa-android
                    = " "
                    = "Android"
                    != "&trade;"
                  //- Linux
                  a.dropdown-item(
                    href=l("/blog/open-source/linux-email-clients"),
                    class=ctx.pathWithoutLocale === "/blog/open-source/linux-email-clients" ? "active" : ""
                  )
                    i.fa-fw.fab.fa-linux
                    = " "
                    = "Linux"
                    != "&reg;"
                  //- Desktop
                  a.dropdown-item(
                    href=l("/blog/open-source/desktop-email-clients"),
                    class=ctx.pathWithoutLocale === "/blog/open-source/desktop-email-clients" ? "active" : ""
                  )
                    i.fa-fw.fas.fa-desktop
                    = " "
                    = t("Desktop")
                  //- Web
                  a.dropdown-item(
                    href=l("/blog/open-source/web-email-clients"),
                    class=ctx.pathWithoutLocale === "/blog/open-source/web-email-clients" ? "active" : ""
                  )
                    if ctx.get("User-Agent") && ctx.get("User-Agent").includes("Firefox")
                      i.fab.fa-fw.fa-firefox-browser
                      = " "
                      = "Firefox"
                      != "&reg;"
                    else if ctx.get("User-Agent") && ctx.get("User-Agent").includes("Safari") && !ctx.get("User-Agent").includes("Chrome")
                      = " "
                      = "Safari"
                      != "&reg;"
                    else
                      i.fab.fa-fw.fa-chrome
                      = " "
                      = "Chrome"
                      != "&reg;"
                  //- Terminal
                  a.dropdown-item(
                    href=l("/blog/open-source/terminal-email-clients"),
                    class=ctx.pathWithoutLocale === "/blog/open-source/terminal-email-clients" ? "active" : ""
                  )
                    i.fa-fw.fas.fa-terminal
                    = " "
                    = "Terminal"

          //- Solutions aka Use Cases (bots only)
          if isBot(ctx.get('User-Agent'))
            li.nav-item.dropdown.no-js
              - const isUseCasesPage = Object.keys(useCases).includes(ctx.pathWithoutLocale);
              form.mb-0
                button#navbar-dropdown-solutions.btn.dropdown-toggle.d-block.text-left.no-js(
                  data-toggle="dropdown",
                  data-boundary="window",
                  aria-haspopup="true",
                  aria-expanded="false",
                  class=isUseCasesPage ? `btn-link ${user ? "text-white" : "text-themed"} text-decoration-underline` : `btn-link ${user ? "text-white" : "text-themed"}`
                )
                  = t("Solutions")
                .dropdown-menu(aria-labelledby="navbar-dropdown-solutions")
                  each useCase in Object.keys(useCases)
                    a.dropdown-item.small(
                      href=l(useCase),
                      class=ctx.pathWithoutLocale === useCase ? "active" : ""
                    )
                      != t(useCases[useCase][0])
          //- Resources
          if !isBot(ctx.get('User-Agent'))
            //- - const resourcePages = ["/private-business-email", "/email-analytics", "/faq", "/tti", "/help", "/disposable-addresses", "/domain-registration", "/encrypt", "/reserved-email-addresses", "/denylist"];
            - const resourcePages = ["/private-business-email", "/faq", "/tti", "/help", "/disposable-addresses", "/domain-registration", "/encrypt", "/reserved-email-addresses", "/denylist"];
            - const isResourcesPage = Boolean(ctx.pathWithoutLocale === "/resources" || (resourcePages.includes(ctx.pathWithoutLocale) && ctx.query && !boolean(ctx.query.pricing)));
            li.nav-item.dropdown.no-js
              form.mb-0
                a#navbar-dropdown-resources.btn.dropdown-toggle.d-block.text-left.no-js(
                  href=l("/resources"),
                  data-toggle="dropdown",
                  data-boundary="window",
                  aria-haspopup="true",
                  aria-expanded="false",
                  class=isResourcesPage ? `btn-link ${user ? "text-white" : "text-themed"} text-decoration-underline` : `btn-link ${user ? "text-white" : "text-themed"}`
                )
                  = t("Resources")
                .dropdown-menu(aria-labelledby="navbar-dropdown-resources")
                  if !isBot(ctx.get('User-Agent')) && ctx.pathWithoutLocale !== '/faq'
                    a.dropdown-item.font-weight-bold(
                      href=l("/faq#what-is-forward-email")
                    )
                      != t('What is <span class="notranslate">Forward Email</span>?')
                  each resourcePage in resourcePages
                    if resourcePage === '/private-business-email'
                      - let pricingPageHref = domain && domain.name ? l(`/private-business-email?domain=${domain.name}`) : l("/private-business-email");
                      if !isBot(ctx.get('User-Agent'))
                        - pricingPageHref += "?pricing=true";
                      a.dropdown-item(
                        href=pricingPageHref,
                        class=ctx.pathWithoutLocale === resourcePage ? "active" : ""
                      )!= t("Features &amp; Pricing")
                    else if resourcePage === '/encrypt'
                      a.dropdown-item(
                        href=l(resourcePage),
                        class=ctx.pathWithoutLocale === resourcePage ? "active" : ""
                      )
                        != t('Encrypt Plaintext <span class="notranslate">TXT</span> Record')
                    else if resourcePage === '/tti'
                      a.dropdown-item(
                        href=l(resourcePage),
                        class=ctx.pathWithoutLocale === resourcePage ? "active" : ""
                      )
                        != t("Time to Inbox")
                    else
                      a.dropdown-item(
                        href=l(resourcePage),
                        class=ctx.pathWithoutLocale === resourcePage ? "active" : ""
                      )
                        if resourcePage === '/faq'
                          = t("Frequently Asked Questions")
                        else if resourcePage === '/denylist'
                          = t("Denylist Removal")
                        else
                          = t(titleize(humanize(resourcePage.replace("/", ""))))
                  a.dropdown-item(
                    href="https://alumniemail.com",
                    target="_blank",
                    rel="noopener noreferrer"
                  ) AlumniEmail.com
                  a.dropdown-item(
                    href="https://timetoinbox.com",
                    target="_blank",
                    rel="noopener noreferrer"
                  ) TimeToInbox.com
                  a.dropdown-item(
                    href="https://serverauditing.com",
                    target="_blank",
                    rel="noopener noreferrer"
                  ) ServerAuditing.com
                  a.dropdown-item(
                    href="https://sshmonitor.com",
                    target="_blank",
                    rel="noopener noreferrer"
                  ) SSHMonitor.com
                  a.dropdown-item(
                    href="https://sslmonitor.com",
                    target="_blank",
                    rel="noopener noreferrer"
                  ) SSLMonitor.com

          //- Guides
          li.nav-item.dropdown.no-js
            form.mb-0
              a#navbar-dropdown-guides.btn.dropdown-toggle.d-block.text-left.no-js(
                href=l("/guides"),
                data-toggle="dropdown",
                data-boundary="window",
                aria-haspopup="true",
                aria-expanded="false",
                data-display="static",
                class=ctx.pathWithoutLocale.startsWith("/guides") ? `btn-link ${user ? "text-white" : "text-themed"} text-decoration-underline` : `btn-link ${user ? "text-white" : "text-themed"}`
              )
                = t("Guides")
              .dropdown-menu.dropdown-menu-xl-left(
                class=user ? "dropdown-menu-md-right dropdown-menu-lg-right" : "dropdown-menu-md-left dropdown-menu-lg-left",
                aria-labelledby="navbar-dropdown-guides"
              )
                h6.dropdown-header= t("Outbound SMTP")
                a.dropdown-item(
                  href=l("/guides/smtp-integration"),
                  class=ctx.pathWithoutLocale === "/guides/smtp-integration" ? "active" : ""
                )
                  = t("SMTP Integration Examples")
                a.dropdown-item(
                  href=l("/guides/send-email-with-custom-domain-smtp"),
                  class=ctx.pathWithoutLocale === "/guides/send-email-with-custom-domain-smtp" ? "active" : ""
                )
                  = t("Send Email with Custom Domain")
                a.dropdown-item(
                  href=l("/guides/send-mail-as-gmail-custom-domain"),
                  class=ctx.pathWithoutLocale === "/guides/send-mail-as-gmail-custom-domain" ? "active" : ""
                )
                  = t("Send Mail As with Gmail")
                hr.dropdown-divider
                h6.dropdown-header= t("Email Setup Guides")
                .card-columns.small
                  each provider in nsProviders
                    - const classes = [];
                    if ctx.pathWithoutLocale === `/guides/${provider.slug}`
                      - classes.push("active");
                    if provider.gif || provider.video
                      - classes.push("font-weight-bold");
                    a.dropdown-item(
                      title=striptags(t('How to Setup Email with <span class="notranslate">%s</span>', provider.name)),
                      href=domain && domain.name ? l(`/guides/${provider.slug}?domain=${domain.name}`) : l(`/guides/${provider.slug}`),
                      class=classes.join(" ")
                    )
                      if isBot(ctx.get('User-Agent'))
                        != t('How to Setup Email with <span class="notranslate">%s</span>', provider.name)
                      else
                        = provider.name
                hr.dropdown-divider
                a.dropdown-item(
                  href=l("/faq#table-dns-management-by-registrar")
                )= t("Other providers")

          //- Developers
          li.nav-item.dropdown.no-js
            form.mb-0
              - let isEmailComparison = false;
                each str in ['best-email-service', 'best-private-email-service', 'best-open-source-email-service', 'best-transactional-email-service', 'best-email-api-developer-service', 'best-email-spam-filtering-service']
                  if ctx.pathWithoutLocale === `/blog/${str}`
                    - isEmailComparison = true;
              a#navbar-dropdown-docs.btn.dropdown-toggle.d-block.text-left.no-js(
                href=l("/blog/docs"),
                data-toggle="dropdown",
                data-boundary="window",
                aria-haspopup="true",
                aria-expanded="false",
                class=!isApps && (isEmailComparison || ctx.pathWithoutLocale === "/email-api" || ctx.pathWithoutLocale === "/free-email-webhooks" || ctx.pathWithoutLocale === "/email-forwarding-regex-pattern-filter" || ctx.pathWithoutLocale.startsWith("/blog/docs") || ctx.pathWithoutLocale.startsWith("/blog/open-source")) ? `btn-link ${user ? "text-white" : "text-themed"} text-decoration-underline` : `btn-link ${user ? "text-white" : "text-themed"}`
              )
                = t("Developers")
              .dropdown-menu.dropdown-menu-right(
                aria-labelledby="navbar-dropdown-docs"
              )
                a.dropdown-item(
                  href="/technical-whitepaper.pdf",
                  target="_blank"
                )= t("Technical Whitepaper")
                a.dropdown-item(
                  href=l("/ips"),
                  class=ctx.pathWithoutLocale === "/ips" ? "active" : ""
                )= t("IP Addresses")
                a.dropdown-item(
                  href=l("/deliverability"),
                  class=ctx.pathWithoutLocale === "/deliverability" ? "active" : ""
                )= t("Email Deliverability Tool")
                a.dropdown-item(
                  href=l("/email-api"),
                  class=ctx.pathWithoutLocale === "/email-api" ? "active" : ""
                )
                  if isBot(ctx.get("User-Agent"))
                    = t("Email API Reference")
                  else
                    = t("API Reference")
                a.dropdown-item(
                  href=l("/self-hosted"),
                  class=ctx.pathWithoutLocale === "/self-hosted" ? "active" : ""
                )
                  = t("Self Hosted Email")
                a.dropdown-item(
                  href=isBot(ctx.get("User-Agent")) ? l("/free-email-webhooks") : l("/faq#do-you-support-webhooks"),
                  class=ctx.pathWithoutLocale === "/free-email-webhooks" ? "active font-weight-bold" : ""
                )
                  if isBot(ctx.get("User-Agent"))
                    = t("Free Email Webhooks")
                  else
                    = t("Email Webhooks")
                a.dropdown-item(href=l("/faq#do-you-support-bounce-webhooks"))
                  = t("Bounce Webhooks")
                a.dropdown-item(
                  href=l("/email-forwarding-regex-pattern-filter"),
                  class=ctx.pathWithoutLocale === "/email-forwarding-regex-pattern-filter" ? "active" : ""
                )= t("Custom Domain Regex Filtering")
                if config.alternatives && config.alternatives.length > 0
                  hr.dropdown-divider
                  h6.dropdown-header= t("Email Service Comparison")
                  .small
                    each str in ['best-email-service', 'best-private-email-service', 'best-open-source-email-service', 'best-transactional-email-service', 'best-email-api-developer-service', 'best-email-spam-filtering-service']
                      a.dropdown-item(
                        href=l(`/blog/${str}`),
                        class=ctx.pathWithoutLocale === `/blog/${str}` ? "active" : ""
                      )
                        - let title = config.meta[`/blog/${str}`][0];
                        if !isBot(ctx.get("User-Agent"))
                          - title = title.split("Best ")[1].split(" in")[0];
                        != striptags(t(title))
                if developerDocs.length > 0
                  hr.dropdown-divider
                  h6.dropdown-header= t("Developer Articles")
                  .small
                    each doc in developerDocs
                      a.dropdown-item(
                        href=l(doc.slug),
                        class=ctx.pathWithoutLocale === doc.slug ? "active" : ""
                      )
                        if !isBot(ctx.get('User-Agent')) && doc.icon
                          i(class=doc.icon)
                          = " "
                        if isBot(ctx.get('User-Agent'))
                          = t(doc.shortTitle || doc.title)
                        else
                          = t(doc.shortTitle || doc.title.replace("Best ", ""))
                if platforms.length > 0 && isBot(ctx.get('User-Agent'))
                  hr.dropdown-divider
                  h6.dropdown-header= t("Open Source")
                  .card-columns.small
                    - const tools = [];
                    - const list = Object.keys(config.meta).filter((key) => key !== "/blog/open-source" && key.startsWith("/blog/open-source"));
                    each item in list
                      - const match = config.meta[item];
                      if match
                        - tools.push({ title: match[0].replace(config.metaTitleAffix, ""), description: match[1], slug: item });
                    each tool in tools
                      a.dropdown-item(
                        href=l(tool.slug),
                        title=striptags(t(tool.title)),
                        class=ctx.pathWithoutLocale === tool.slug ? "active" : ""
                      )!= t(tool.title)

          //- Company
          if !isBot(ctx.get('User-Agent'))
            - const companyPages = ["/about", "/security", "/privacy", "/terms", "/gdpr", "/dpa", "/report-abuse", "/press"];
            - const isCompanyPage = companyPages.includes(ctx.pathWithoutLocale);
            li.nav-item.dropdown.no-js
              form.mb-0
                a#navbar-dropdown-company.btn.dropdown-toggle.d-block.text-left.no-js(
                  href=l("/about"),
                  data-toggle="dropdown",
                  data-boundary="window",
                  aria-haspopup="true",
                  aria-expanded="false",
                  class=isCompanyPage ? `btn-link ${user ? "text-white" : "text-themed"} text-decoration-underline` : `btn-link ${user ? "text-white" : "text-themed"}`
                )
                  = t("Company")
                .dropdown-menu(aria-labelledby="navbar-dropdown-company")
                  each companyPage in companyPages
                    a.dropdown-item(
                      href=l(companyPage),
                      class=ctx.pathWithoutLocale === companyPage ? "active" : ""
                    )
                      if companyPage === '/gdpr'
                        = t("GDPR")
                      else if companyPage === '/dpa'
                        = t("DPA")
                      else
                        = t(titleize(humanize(companyPage.replace("/", ""))))
                  a.dropdown-item(
                    href=`mailto:careers@${config.supportEmail.split('@')[1]}`,
                    target="_blank",
                    rel="noopener noreferrer",
                    data-toggle="tooltip",
                    data-title=t("Send us an email"),
                    data-placement="bottom"
                  )= t("Careers")
                  if !isBot(ctx.get('User-Agent'))
                    a.dropdown-item(
                      href="https://status.forwardemail.net/",
                      target="_blank",
                      rel="noopener noreferrer",
                      data-toggle="tooltip",
                      data-title=statusOutage ? t("Issue Detected") : t("100% Systems Online"),
                      data-placement="bottom"
                    )
                      = t("Status Page")
                      = " "
                      if statusOutage
                        span.badge.badge-pill.badge-warning.text-monospace= t("Issue")
                      else
                        span.badge.badge-pill.badge-success.text-monospace= t("100%")
                  hr.dropdown-divider
                  h6.dropdown-header= t("Community")
                  a.dropdown-item(
                    href=l("/my-account/profile?newsletter=true")
                  )
                    i.fa.fa-fw.fas.fa-newspaper
                    = " "
                    = t("Newsletter")
                  a.dropdown-item(
                    href="https://github.com/forwardemail",
                    target="_blank",
                    rel="noopener noreferrer"
                  )
                    i.fa.fa-fw.fa-github
                    = " "
                    = "GitHub"
                  a.dropdown-item(
                    href="https://x.com/fwdemail",
                    target="_blank",
                    rel="noopener noreferrer"
                  )
                    i.fa.fa-fw.fa-twitter-x
                    = " "
                    = "@fwdemail"
                  a.dropdown-item(
                    href="https://matrix.to/#/#forwardemail:matrix.org",
                    target="_blank",
                    rel="noopener noreferrer"
                  )
                    i.fa-fw.fa.fa-comment
                    = " "
                    = "Matrix"
                  a.dropdown-item(
                    href="https://youtube.com/forwardemail",
                    target="_blank",
                    rel="noopener noreferrer"
                  )
                    i.fab.fa-fw.fa-youtube
                    = " "
                    = "YouTube"
                  a.dropdown-item(
                    href=`${config.urls.web}/blog/feed/atom`,
                    target="_blank",
                    rel="noopener noreferrer"
                  )
                    i.fa-fw.fas.fa-rss
                    = " "
                    = "RSS Feed"

          //- links that show only if you're logged in
          if user
            //- links that show if you're an admin
            if user.group === 'admin'
              li.nav-item.dropdown.ml-xl-1.mt-1.mt-lg-0
                form.mb-0
                  a#navbar-dropdown-admin.btn.dropdown-toggle.d-block.text-left(
                    href=l("/admin"),
                    data-toggle="dropdown",
                    data-boundary="window",
                    aria-haspopup="true",
                    aria-expanded="false",
                    class=ctx.pathWithoutLocale.startsWith("/admin") ? `btn-link ${user ? "text-white" : "text-themed"} text-decoration-underline` : `btn-link ${user ? "text-white" : "text-themed"}`
                  )
                    = t("Admin")
                  .dropdown-menu(aria-labelledby="navbar-dropdown-admin")
                    a.dropdown-item(
                      class=ctx.pathWithoutLocale === "/admin" ? "active" : "",
                      href=l("/admin")
                    )= t("Dashboard")
                    a.dropdown-item(
                      class=ctx.pathWithoutLocale.startsWith("/admin/users") ? "active" : "",
                      href=l("/admin/users")
                    )= t("Users")
                    a.dropdown-item(
                      class=ctx.pathWithoutLocale.startsWith("/admin/domains") ? "active" : "",
                      href=l("/admin/domains")
                    )= t("Domains")
                    a.dropdown-item(
                      class=ctx.pathWithoutLocale.startsWith("/admin/inquiries") ? "active" : "",
                      href=l("/admin/inquiries")
                    )= t("Inquiries")
                    a.dropdown-item(
                      class=ctx.pathWithoutLocale.startsWith("/admin/emails") ? "active" : "",
                      href=l("/admin/emails")
                    )= t("Emails")
                    a.dropdown-item(
                      class=ctx.pathWithoutLocale.startsWith("/admin/payments") ? "active" : "",
                      href=l("/admin/payments")
                    )= t("Payments")
                    a.dropdown-item(
                      class=ctx.pathWithoutLocale.startsWith("/admin/logs") ? "active" : "",
                      href=l("/admin/logs")
                    )= t("Logs")
                    a.dropdown-item(
                      class=ctx.pathWithoutLocale.startsWith("/admin/allowlist") ? "active" : "",
                      href=l("/admin/allowlist")
                    )= t("Allowlist")
                    a.dropdown-item(
                      class=ctx.pathWithoutLocale.startsWith("/admin/denylist") ? "active" : "",
                      href=l("/admin/denylist")
                    )= t("Denylist")
            li.nav-item.dropdown.ml-xl-1.mt-1.mt-lg-0
              form.mb-0
                a#navbar-dropdown-my-account.btn.dropdown-toggle.d-block.text-left(
                  href=l("/my-account"),
                  data-toggle="dropdown",
                  data-boundary="window",
                  aria-haspopup="true",
                  aria-expanded="false",
                  class=ctx.pathWithoutLocale.startsWith("/my-account") ? `btn-link ${user ? "text-white" : "text-themed"} text-decoration-underline` : `btn-link ${user ? "text-white" : "text-themed"}`
                )
                  = t("My Account")
                .dropdown-menu(aria-labelledby="navbar-dropdown-my-account")
                  //- a.dropdown-item(class=ctx.pathWithoutLocale === '/my-account' ? 'active' : '', href=l('/my-account'))= t('Dashboard')
                  a.dropdown-item(
                    class=ctx.pathWithoutLocale.startsWith("/my-account/domains") ? "active" : "",
                    href=l("/my-account/domains")
                  )= t("Domains")
                  a.dropdown-item(
                    class=ctx.pathWithoutLocale.startsWith("/my-account/emails") ? "active" : "",
                    href=l("/my-account/emails")
                  )= t("Emails")
                  a.dropdown-item(
                    class=ctx.pathWithoutLocale.startsWith("/my-account/analytics") ? "active" : "",
                    href=l("/my-account/analytics")
                  )= t("Analytics")
                  a.dropdown-item(
                    class=ctx.pathWithoutLocale.startsWith("/my-account/logs") ? "active" : "",
                    href=l("/my-account/logs")
                  )= t("Logs")
                  a.dropdown-item(
                    class=ctx.pathWithoutLocale === "/my-account/profile" ? "active" : "",
                    href=l("/my-account/profile")
                  )= t("Profile")
                  a.dropdown-item(
                    class=ctx.pathWithoutLocale === "/my-account/billing" ? "active" : "",
                    href=l("/my-account/billing")
                  )= t("Billing")
                  a.dropdown-item(
                    class=ctx.pathWithoutLocale === "/my-account/security" ? "active" : "",
                    href=l("/my-account/security")
                  )= t("Security")
                  a.dropdown-item(href=l("/logout"))= t("Sign out")
          //- links that show only if you're logged out
          else
            if !isBot(ctx.get('User-Agent'))
              if ctx.pathWithoutLocale !== config.loginRoute
                li.nav-item.ml-0.ml-xl-3
                  a.btn.btn-link.text-themed.d-block.text-left(
                    role=isRegisterOrLogin ? "link" : "button",
                    href=l(config.loginRoute),
                    data-toggle=isRegisterOrLogin ? false : "modal-anchor",
                    data-target=isRegisterOrLogin ? false : "#modal-sign-in"
                  )= t("Log in")
              if ctx.pathWithoutLocale !== '/register'
                li.nav-item.ml-0.ml-xl-3
                  a.btn.btn-link.d-block.d-lg-none.text-left.font-weight-bold.text-success(
                    href=l("/register"),
                    data-toggle=isRegisterOrLogin ? false : "modal-anchor",
                    data-target=isRegisterOrLogin ? false : "#modal-sign-up"
                  )
                    = t("Signup")
                  a.btn.btn-success.text-left.text-uppercase.font-weight-bold.d-none.d-lg-block(
                    href=l("/register"),
                    data-toggle=isRegisterOrLogin ? false : "modal-anchor",
                    data-target=isRegisterOrLogin ? false : "#modal-sign-up"
                  )
                    = t("Signup")
if user
  noscript
    .alert.alert-danger.font-weight-bold.text-center.border-top-0.border-left-0.border-right-0.rounded-0.small!= t("Please enable JavaScript to use our website.")
//-.
  else if !isBot(ctx.get('User-Agent')) && dayjs().isBefore(dayjs('1/1/24', 'M/D/YY')) && ctx.pathWithoutLocale === '/' || (ctx.pathWithoutLocale === '/private-business-email' && ctx.query.pricing !== 'true')
    div.text-center.my-3.text-uppercase.lead
      a.badge.badge-pill.badge-primary(
        href=l("/faq#do-you-support-sending-email-with-smtp")
      )= t("Outbound SMTP is now available!")
